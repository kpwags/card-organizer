@page "/register"
@using CardOrganizer.ViewModels

@inject IAccountService AccountService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Register | Card Organizer</PageTitle>

<main class="block small">
    <div class="bg-white rounded-lg border-4 border-neutral-400 p-8">
        <h1 class="text-3xl">Register for an account</h1>
        <EditForm Model="@_model" OnSubmit="@RegisterUser">
            <DataAnnotationsValidator/>
            
            @if (_pageError != "")
            {
                <div class="alert error mt-8 mb-0">
                    @_pageError
                </div>
            }
            
            <fieldset disabled="@_isLoading" aria-busy="@_isLoading">
                <div class="my-8">
                    <label for="name" class="mb-8">
                        <div class="pb-2 font-semibold">Name</div>
                        <InputText type="text" id="name" DisplayName="Name" @bind-Value="@_model.Name"/>
                        <ValidationMessage For="@(() => _model.Name)"></ValidationMessage>
                    </label>
                </div>
                <div class="my-8">
                    <label for="email" class="mb-8">
                        <div class="pb-2 font-semibold">Email</div>
                        <InputText type="email" id="email" DisplayName="Email" @bind-Value="@_model.Email"/>
                        <ValidationMessage For="@(() => _model.Email)"></ValidationMessage>
                    </label>
                </div>
                <div class="my-8">
                    <label for="email" class="mb-8">
                        <div class="pb-2 font-semibold">Password</div>
                        <InputText type="password" id="password" DisplayName="Email" @bind-Value="@_model.Password"/>
                        <ValidationMessage For="@(() => _model.Password)"></ValidationMessage>
                    </label>
                </div>
                <div class="my-8">
                    <label for="email" class="mb-8">
                        <div class="pb-2 font-semibold">Confirm Password</div>
                        <InputText type="password" id="confirm-password" DisplayName="Email" @bind-Value="@_model.ConfirmPassword"/>
                        <ValidationMessage For="@(() => _model.ConfirmPassword)"></ValidationMessage>
                    </label>
                </div>
                <div class="mt-8">
                    <button type="submit">Submit</button>
                </div>
            </fieldset>
        </EditForm>
    </div>
</main>

@code {
    private readonly RegisterUserAccountViewModel _model = new();
    private bool _isLoading;
    private string _pageError = string.Empty;

    private async void RegisterUser(EditContext editContext)
    {
        _pageError = string.Empty;
        
        bool isValid = editContext.Validate();
        
        if (!isValid)
        {
            return;
        }
        
        _isLoading = true;
        
        try
        {
            var user = await AccountService.RegisterUser(new UserAccount
            {
                Name = _model.Name,
                Email = _model.Email,
            }, _model.Password);
            
            await ((CustomAuthenticationStateProvider)AuthStateProvider).AuthenticateUser(user);
            
            NavigationManager.NavigateTo("/", true);
            
            _isLoading = false;
        }
        catch (Exception e)
        {
            _pageError = e.Message;
            _isLoading = false;
            StateHasChanged();
        }
    }
}