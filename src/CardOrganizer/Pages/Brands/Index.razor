@page "/brands"
@using CardOrganizer.Extensions

@inject IBrandRespository BrandRespository
@inject IJSRuntime JsRuntime

<AuthorizeView>
    <Authorized>
        <div class="p-8 w-1/2 my-0 mx-auto">
            <div class="flex justify-between">
                <h1 class="text-3xl">Manage Brands</h1>
                <a href="/brands/add" class="btn-primary">Add Brand</a>
            </div>
            <div class="w-full">
                <table class="standard-table border-2 border-zinc-700 table-fixed w-full my-16">
                    <thead>
                    <tr class="border-b-2 border-zinc-700">
                        <th class="text-left p-2">Brand</th>
                        <th class="text-left p-2">Type</th>
                        <th class="text-left p-2">Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (!_brands.Any())
                    {
                        <tr class="py-4">
                            <td colspan="3" class="p-16 text-center">No Brands Available</td>
                        </tr>
                    }
                    @foreach (var brand in _brands)
                    {
                        <tr class="py-4 border-b border-zinc-700">
                            <td class="p-2">
                                @brand.Name
                                @if (!brand.IsActive)
                                {
                                    <br/>
                                    <span class="text-sm italic">Inactive</span>
                                }
                            </td>
                            <td class="p-2">@brand.CardType</td>
                            <td class="p-2">
                                <a href="/brands/edit/@brand.BrandId" class="pr-4">Edit</a>
                                <button
                                    type="button"
                                    class="btn-action-link"
                                    @onclick="async () => await DeleteBrand(brand.BrandId)">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <PleaseLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    private IReadOnlyCollection<Brand> _brands = Array.Empty<Brand>();

    protected override async Task OnInitializedAsync()
    {
        _brands = await Task.FromResult(BrandRespository.GetAll().ToList());
    }

    private async Task DeleteBrand(int brandId)
    {
        if (!await JsRuntime.Confirm("Are you sure you want to delete this brand?"))
        {
            return;
        }
        
        await BrandRespository.Delete(brandId);
        
        _brands = await Task.FromResult(BrandRespository.GetAll().ToList());
    }
}