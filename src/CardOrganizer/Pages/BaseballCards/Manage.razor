@page "/baseball/manage"
@using CardOrganizer.Extensions

@inject IBaseballCardRepository BaseballCardRepository
@inject IJSRuntime JsRuntime

<AuthorizeView>
    <Authorized>
        <div class="p-8 w-full my-0 mx-auto">
            <div class="flex justify-between">
                <h1 class="text-3xl text-primary">Manage Baseball Cards</h1>
                <a href="/baseball/add" class="btn-primary">Add Card</a>
            </div>
            <div class="w-full">
                <table class="standard-table border-2 border-zinc-700 table-fixed w-full mt-16">
                    <thead>
                    <tr class="border-b-2 border-zinc-700">
                        <th class="text-left p-2 cursor-pointer" @onclick="(() => ChangeSort(TableColumn.PlayerName))">
                            Player
                            
                            @if (_currentSort == BaseballCardSort.NameAsc)
                            {
                                <SortIndicator SortDirection="ASC" />
                            }
                            
                            @if (_currentSort == BaseballCardSort.NameDesc)
                            {
                                <SortIndicator SortDirection="DESC" />
                            }
                        </th>
                        <th class="text-left p-2 cursor-pointer" @onclick="(() => ChangeSort(TableColumn.Team))">
                            Team
                            
                            @if (_currentSort == BaseballCardSort.TeamAsc)
                            {
                                <SortIndicator SortDirection="ASC" />
                            }
                            
                            @if (_currentSort == BaseballCardSort.TeamDesc)
                            {
                                <SortIndicator SortDirection="DESC" />
                            }
                        </th>
                        <th class="text-left p-2 cursor-pointer" @onclick="(() => ChangeSort(TableColumn.Brand))">
                            Brand
                            
                            @if (_currentSort == BaseballCardSort.BrandAsc)
                            {
                                <SortIndicator SortDirection="ASC" />
                            }
                            
                            @if (_currentSort == BaseballCardSort.BrandDesc)
                            {
                                <SortIndicator SortDirection="DESC" />
                            }
                        </th>
                        <th class="text-left p-2 cursor-pointer" @onclick="(() => ChangeSort(TableColumn.Year))">
                            Year
                            
                            @if (_currentSort == BaseballCardSort.YearAsc)
                            {
                                <SortIndicator SortDirection="ASC" />
                            }
                            
                            @if (_currentSort == BaseballCardSort.YearDesc)
                            {
                                <SortIndicator SortDirection="DESC" />
                            }
                        </th>
                        <th class="text-left p-2 cursor-pointer" @onclick="(() => ChangeSort(TableColumn.Quantity))">
                            Quantity
                            
                            @if (_currentSort == BaseballCardSort.QuantityAsc)
                            {
                                <SortIndicator SortDirection="ASC" />
                            }
                            
                            @if (_currentSort == BaseballCardSort.QuantityDesc)
                            {
                                <SortIndicator SortDirection="DESC" />
                            }
                        </th>
                        <th class="text-left p-2">Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (!_displayedCards.Any())
                    {
                        <tr class="py-4">
                            <td colspan="5" class="p-16 text-center">No Cards Available</td>
                        </tr>
                    }
                    
                    @foreach (var card in _displayedCards)
                    {
                        <tr class="py-4 border-b border-zinc-700">
                            <td class="p-2">
                                @card.PlayerName (@card.PlayerPosition)
                            </td>
                            <td class="p-2">@card.Team</td>
                            <td class="p-2">@card.Brand.Name</td>
                            <td class="p-2">@card.Year</td>
                            <td class="p-2">@card.Quantity</td>
                            <td class="p-2">
                                <a href="/baseball/edit/@card.BaseballCardId" class="pr-4">Edit</a>
                                <button
                                    type="button"
                                    class="btn-action-link"
                                    @onclick="async () => await DeleteCard(card.BaseballCardId)">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            
                @if (_displayedCards.Count < _allCards.Count)
                {
                    <div class="mt-4 flex justify-between items-center">
                        <div className="flex justify-center">
                            @if (_pageNumber > 1)
                            {
                                <button type="button" class="btn-action-link mx-4" onclick="@(() => ChangePage(_pageNumber - 1))">&lt; Prev</button>
                            }
                            
                            @if (_pageNumber < _lastPage)
                            {
                                <button type="button" class="btn-action-link mx-4" onclick="@(() => ChangePage(_pageNumber + 1))">Next &gt;</button>
                            }
                        </div>
                        <div>
                            <label for="perPage">
                                <span class="pr-2 font-semibold">Cards Per Page</span>
                                <InputSelect type="text" id="perPage" @bind-Value="@CardsPerPage">
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                    <option value="100">100</option>
                                </InputSelect>
                            </label>
                        </div>
                    </div>
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <PleaseLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    private IReadOnlyCollection<BaseballCard> _allCards = Array.Empty<BaseballCard>();
    private IReadOnlyCollection<BaseballCard> _displayedCards = Array.Empty<BaseballCard>();
    private int _pageNumber = 1;
    private int _cardsPerPage = 25;
    private int _lastPage = 1;
    private BaseballCardSort _currentSort = BaseballCardSort.NameAsc;

    private enum TableColumn
    {
        PlayerName,
        Team,
        Year,
        Brand,
        Quantity,
    }
    
    private enum BaseballCardSort
    {
        NameAsc,
        NameDesc,
        TeamAsc,
        TeamDesc,
        YearAsc,
        YearDesc,
        BrandAsc,
        BrandDesc,
        QuantityAsc,
        QuantityDesc
    }

    private int CardsPerPage
    {
        get => _cardsPerPage;
        set
        {
            _cardsPerPage = value;
            _pageNumber = 1;
            _lastPage = (int)Math.Ceiling((double)_allCards.Count / (double)_cardsPerPage);
            _displayedCards = _allCards
                .Take(_cardsPerPage)
                .ToList();
        }
    }

    private void ChangeSort(TableColumn column)
    {
        _currentSort = column switch
        {
            TableColumn.PlayerName => _currentSort == BaseballCardSort.NameAsc ? BaseballCardSort.NameDesc : BaseballCardSort.NameAsc,
            TableColumn.Team=> _currentSort == BaseballCardSort.TeamAsc ? BaseballCardSort.TeamDesc : BaseballCardSort.TeamAsc,
            TableColumn.Brand => _currentSort == BaseballCardSort.BrandAsc ? BaseballCardSort.BrandDesc : BaseballCardSort.BrandAsc,
            TableColumn.Year => _currentSort == BaseballCardSort.YearAsc ? BaseballCardSort.YearDesc : BaseballCardSort.YearAsc,
            TableColumn.Quantity => _currentSort == BaseballCardSort.QuantityAsc ? BaseballCardSort.QuantityDesc : BaseballCardSort.QuantityAsc,
            _ => BaseballCardSort.NameAsc    
        };
        
        _pageNumber = 1;
        _lastPage = (int)Math.Ceiling((double)_allCards.Count / (double)_cardsPerPage);
        
        SortCards();
    }

    private void SortCards()
    {
        var cards = _allCards
            .Skip((_pageNumber - 1) * _cardsPerPage)
            .Take(_cardsPerPage);

        _displayedCards = _currentSort switch
        {
            BaseballCardSort.NameAsc => cards.OrderBy(c => c.PlayerName).ToList(),
            BaseballCardSort.NameDesc => cards.OrderByDescending(c => c.PlayerName).ToList(),
            BaseballCardSort.TeamAsc => cards.OrderBy(c => c.Team).ToList(),
            BaseballCardSort.TeamDesc => cards.OrderByDescending(c => c.Team).ToList(),
            BaseballCardSort.BrandAsc => cards.OrderBy(c => c.Brand.Name).ToList(),
            BaseballCardSort.BrandDesc => cards.OrderByDescending(c => c.Brand.Name).ToList(),
            BaseballCardSort.YearAsc => cards.OrderBy(c => c.Year).ToList(),
            BaseballCardSort.YearDesc => cards.OrderByDescending(c => c.Year).ToList(),
            BaseballCardSort.QuantityAsc => cards.OrderBy(c => c.Quantity).ToList(),
            BaseballCardSort.QuantityDesc => cards.OrderByDescending(c => c.Quantity).ToList(),
            _ => cards.OrderBy(c => c.PlayerName).ToList(),
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAllCards();

        _displayedCards = _allCards
            .Take(_cardsPerPage)
            .ToList();

        _lastPage = (int)Math.Ceiling((double)_allCards.Count / (double)_cardsPerPage);
    }

    private async Task GetAllCards()
    {
        _allCards = await Task.FromResult(BaseballCardRepository.GetAll().ToList());
    }

    private void ChangePage(int pg)
    {
        _pageNumber = pg;
        _displayedCards = _allCards
            .Skip((_pageNumber - 1) * _cardsPerPage)
            .Take(_cardsPerPage)
            .ToList();
    }

    private async Task DeleteCard(int baseballCardId)
    {
        if (!await JsRuntime.Confirm("Are you sure you want to delete this card?"))
        {
            return;
        }
        
        await BaseballCardRepository.Delete(baseballCardId);

        await GetAllCards();
        
        SortCards();
    }
}